(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{477:function(t,a,s){"use strict";s.r(a);var n=s(14),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),s("ul",[s("li",[t._v("一个"),s("strong",[t._v("后进先出")]),t._v("的数据结构")]),t._v(" "),s("li",[t._v("js中没有栈，但可以用Array实现栈的所有功能")])]),t._v(" "),s("h2",{attrs:{id:"应用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[t._v("#")]),t._v(" 应用场景")]),t._v(" "),s("p",[t._v("需要后进先出的场景")]),t._v(" "),s("h3",{attrs:{id:"十进制转二级制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#十进制转二级制"}},[t._v("#")]),t._v(" 十进制转二级制")]),t._v(" "),s("p",[t._v("后出来的余数反而要排到前面"),s("br"),t._v("\n把余数依次入栈，然后再出栈，就可以实现余数倒序输出")]),t._v(" "),s("h3",{attrs:{id:"判断字符串的括号是否有效"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#判断字符串的括号是否有效"}},[t._v("#")]),t._v(" 判断字符串的括号是否有效")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/valid-parentheses/",target:"_blank",rel:"noopener noreferrer"}},[t._v("20.有效的括号"),s("OutboundLink")],1)]),t._v(" "),s("h3",{attrs:{id:"函数调用堆栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数调用堆栈"}},[t._v("#")]),t._v(" 函数调用堆栈")]),t._v(" "),s("ul",[s("li",[t._v("js解释器使用栈来控制函数的调用顺序")]),t._v(" "),s("li",[s("strong",[t._v("最后")]),t._v("调用的函数反而"),s("strong",[t._v("最先")]),t._v("执行完")])]),t._v(" "),s("h2",{attrs:{id:"leetcode-20-有效的括号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#leetcode-20-有效的括号"}},[t._v("#")]),t._v(" LeetCode：20.有效的括号")]),t._v(" "),s("h3",{attrs:{id:"解题思路"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解题思路"}},[t._v("#")]),t._v(" 解题思路")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("对于没有闭合的左括号而言，越靠后的左括号，对应的右括号越靠前")])]),t._v(" "),s("li",[s("p",[t._v("满足后进先出，考虑用栈。")])])]),t._v(" "),s("h3",{attrs:{id:"解题步骤"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解题步骤"}},[t._v("#")]),t._v(" 解题步骤")]),t._v(" "),s("ol",[s("li",[t._v("新建一个栈")]),t._v(" "),s("li",[t._v("左括号入栈，遇到右括号与栈顶括号匹配，类型相同栈顶元素出栈，类型不同直接判断为不合法")]),t._v(" "),s("li",[t._v("最后栈空了就合法，否则不合法")])]),t._v(" "),s("h2",{attrs:{id:"前端与栈-js中的函数调用堆栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前端与栈-js中的函数调用堆栈"}},[t._v("#")]),t._v(" 前端与栈： js中的函数调用堆栈")]),t._v(" "),s("p",[t._v("最后调用的函数，最先执行完")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("fun1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("fun2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("fun3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("函数执行顺序 fun3() -> fun2() -> fun1()")])])}),[],!1,null,null,null);a.default=r.exports}}]);