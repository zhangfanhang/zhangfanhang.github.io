(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{465:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"let和const是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#let和const是什么"}},[t._v("#")]),t._v(" let和const是什么")]),t._v(" "),a("p",[t._v("var声明变量，let代替var,声明变量。\nconst声明常量。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// let和const的用法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" username "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Alex'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" sex"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'male'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("什么是变量什么是常量?")]),t._v(" "),a("ul",[a("li",[t._v("var,let声明的是变量，变量一旦初始化以后，还可以重新赋值。")]),t._v(" "),a("li",[t._v("const声明的是常量，常量一旦初始化，就不能重新赋值了，否则会报错。")])]),t._v(" "),a("h2",{attrs:{id:"const"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#const"}},[t._v("#")]),t._v(" const")]),t._v(" "),a("h3",{attrs:{id:"为什么需要const"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要const"}},[t._v("#")]),t._v(" 为什么需要const")]),t._v(" "),a("p",[t._v("const就是为了那些一旦"),a("strong",[t._v("初始化")]),t._v("就"),a("strong",[t._v("不希望重新赋值")]),t._v("的情况设计的")]),t._v(" "),a("h3",{attrs:{id:"使用const的注意事项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用const的注意事项"}},[t._v("#")]),t._v(" 使用const的注意事项")]),t._v(" "),a("p",[t._v("使用const声明常量，一旦声明，就必须立即初始化，不能留到最后赋值。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//这是错误的\nconst sex;\nsex='male' \n")])])]),a("p",[t._v("const声明的常量，允许在不重新赋值的情况下修改它的值：")]),t._v(" "),a("ol",[a("li",[t._v("基本类型数据类型是做不到的")]),t._v(" "),a("li",[t._v("引用数据类型可以")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" person"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("username"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bob'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nperson"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("username"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'zhang'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"什么时候用const-什么时候用let"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么时候用const-什么时候用let"}},[t._v("#")]),t._v(" 什么时候用const，什么时候用let")]),t._v(" "),a("ol",[a("li",[t._v("简单一看能用let的场景就用let,比如for循环中的循环变量")]),t._v(" "),a("li",[t._v("判断不了就用const,报错好修改")])]),t._v(" "),a("h2",{attrs:{id:"let-const与var的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#let-const与var的区别"}},[t._v("#")]),t._v(" let,const与var的区别")]),t._v(" "),a("h3",{attrs:{id:"重复声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重复声明"}},[t._v("#")]),t._v(" 重复声明")]),t._v(" "),a("p",[t._v("已经存在的变量或常量，又声明了一遍，var允许重复声明，let,const不允许。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//SyntaxError: Identifier 'b' has already been declared")]),t._v("\n")])])]),a("h3",{attrs:{id:"变量提升"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量提升"}},[t._v("#")]),t._v(" 变量提升")]),t._v(" "),a("p",[t._v("var会提升变量的声明到当前作用域的顶部，let，const不存在变量提升。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" \nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ReferenceError: Cannot access 'b' before initialization")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" \n")])])]),a("h3",{attrs:{id:"暂时性锁区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#暂时性锁区"}},[t._v("#")]),t._v(" 暂时性锁区")]),t._v(" "),a("p",[t._v("只要作用域内存在let,const，它们所声明的变量或常量就自动绑定这个区域，不再受到外部作用域的影响。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2 ")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 暂时性锁区.不会进行作用域链查找，Cannot access 'a' before initialization")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只有函数被调用的时候才会形成函数作用域")]),t._v("\n\n")])])]),a("p",[a("strong",[t._v("养成良好的编程习惯，对于所有的变量或常量，做到先声明再使用，可以避免以上出现的问题")])]),t._v(" "),a("h3",{attrs:{id:"window对象的属性和方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#window对象的属性和方法"}},[t._v("#")]),t._v(" window对象的属性和方法")]),t._v(" "),a("p",[t._v("全局作用域中，var声明的变量，通过function声明的函数，会自动变成window对象的属性或方法，let、 const不会。")]),t._v(" "),a("h3",{attrs:{id:"块级作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#块级作用域"}},[t._v("#")]),t._v(" 块级作用域")]),t._v(" "),a("p",[t._v("let，const会形成块级作用域，var没有块级作用域。")]),t._v(" "),a("ul",[a("li",[t._v("什么是块级作用域?")])]),t._v(" "),a("p",[t._v("var没有块级作用域,let const 有块级作用域。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("for(let i=1;i<3;i++){\n    console.log(i) // 0,1,2\n}\nconsole.log(i)  // i is not defined\n")])])]),a("ul",[a("li",[t._v("作用域链")])]),t._v(" "),a("p",[t._v("作用域链: 内层作用域-》外层作用域-》全局作用域")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("   function func(){\n          for(let i=0;i<3;i++){\n              console.log(i);\n          }\n      }\n      func()\n      console.log(i);\n")])])]),a("ul",[a("li",[t._v("有哪些块级作用域")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("{}\nfor(){}\nwhile(){}\ndo{}while()\nif(){}\nswitch(){}\n\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);